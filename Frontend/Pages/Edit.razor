@page "/edit/{CurrentID}"
@inherits EditBase

<h1>Edit</h1>


<EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-md-8">
            <div class="form-group">
                <label for=" Name" class="control-label">Name</label>
                <InputText id="Name" class="form-control" placeholder="Name" @bind-Value="product.Name" />
                <ValidationMessage For="@(()=> product.Name)" />
            </div>
            <div class="form-group">
                <label for="Description" class="control-label">Description</label>
                <InputText id="Description" class="form-control" placeholder="Description" @bind-Value="product.Description" />
                <ValidationMessage For="@(()=> product.Description)" />
            </div>
            <div class="form-group row">
                <label for="stock" class="col-sm-2 col-form-label">
                    Price
                </label>
                <div class="col-sm-10">
                    <InputNumber id="price" class="form-control" placeholder="price" @bind-Value="ProductPrice" />
                    <ValidationMessage For="@(()=> ProductPrice)" />
                </div>
            </div>
            <div class="form-group row">
                <label for="stock" class="col-sm-2 col-form-label">
                    SalePrice
                </label>
                <div class="col-sm-10">
                    <InputNumber id="salePrice" class="form-control" placeholder="salePrice" @bind-Value="SalePrice" />
                    <ValidationMessage For="@(()=> SalePrice)" />
                </div>
            </div>
            <div class="form-group">
            <label for="ProductCategory" class="control-label">Category</label>
                <InputSelect @bind-Value="@ProductCatId" class="form-control">
                    @foreach (var category in ProductCategories)
                    {
                        <option value="@category.Id" class="form-control">@category.CategoryName</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for=" Price" class="control-label">Stock</label>
                <InputNumber id="stock" class="form-control" placeholder="stock" @bind-Value="product.Stock" />
                <ValidationMessage For="@(()=> product.Stock)" />
            </div>
            <div class="form-group row">
                <label for="IsFeatured" class="col-sm-2 col-form-label">Featured</label>
                <div class="col-sm-10">
                    <input type="checkbox" style="height: 100%" @bind="product.IsFeatured">
                </div>
            </div>
            <div class="form-group row">
                <label for="IsAvailable" class="col-sm-2 col-form-label">Is Available</label>
                <div class="col-sm-10">
                    <input type="checkbox" style="height: 100%" @bind="product.IsAvailable">
                </div>
            </div>

        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <input type="submit" class="btn btn-primary" value="Edit" />
                <input type="button" class="btn btn-primary" @onclick="@cancel" value="Cancel" />
            </div>
        </div>
    </div>
</EditForm>


@code {
    [Parameter]
    public string CurrentID { get; set; }
    Product product = new Product();

    string ProductCatId { get; set; }
    public List<ProductCategory> ProductCategories { get; set; } = new List<ProductCategory>();

    protected override async Task OnInitializedAsync()
    {
        product = await Task.Run(() => ProductService.GetProductById(Convert.ToInt32(CurrentID)));
        ProductCategories = (await ProductService.GetAllProductCategories()).ToList();
    }


    protected async void HandleValidSubmit()
    {
        if (SalePrice == null)
            SalePrice = 0;

        if (ProductCatId == null)
            ProductCatId = "1";

        product.ProductCategoryId = int.Parse(ProductCatId);
        await ProductService.Update(product, ProductPrice, (decimal)SalePrice);
        product = await Task.Run(() => ProductService.GetProductById(Convert.ToInt32(CurrentID)));
        StateHasChanged();
        NavigationManager.NavigateTo("manageproducts");
    }

    void cancel()
    {
        NavigationManager.NavigateTo("manageproducts");
    }

}
