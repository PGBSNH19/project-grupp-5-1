@page "/productdetails/{id}"
@page  "/productdetails/"
@using Frontend.Models
@inherits ProductDetailsBase
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JSRuntime
<h3>Product Details</h3>

@if (product == null)
{
    <p><em>Loading....</em></p>
}
else
{
    <div class="row justify-content-center m-3">
        <div class="col-sm-8">
            <div class="card">
                <div class="card-header">
                    <h1>@product.Name</h1>
                </div>

                <div class="card-body text-center">
                    <img class="card-img-top" />

                    <h4>Product ID : @product.Id</h4>
                    <h4>Description : @product.Description</h4>
                    <h4>Category : @product.ProductCategoryId</h4>
                </div>
                <div class="card-footer text-center">
                    <a href="/" class="btn btn-light">Return</a>
                    <button @onclick="() => AddProductToBasket(product)" class="btn btn-primary">Add to basket</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    public async Task AddProductToBasket(Product product)
    {
        bool basketExists = await localStorage.ContainKeyAsync("customer-basket");
        var basket = basketExists ? await localStorage.GetItemAsync<List<ProductInBasket>>("customer-basket") : new List<ProductInBasket>();

        ProductInBasket productInBasket = basket.FirstOrDefault(x => x.Product.Id == product.Id);

        if (productInBasket == null)
        {
            ProductInBasket newProductInBasket = new ProductInBasket
            {
                Product = product,
                Amount = 1
            };
            basket.Add(newProductInBasket);
        }
        else
        {
            if (productInBasket.Amount >= product.Stock)
            {
                await JSRuntime.InvokeAsync<bool>("confirm", $"You can't order more than {product.Stock} of this product.");
            }
            else
            {
                productInBasket.Amount++;
            }
        }

        await localStorage.SetItemAsync("customer-basket", basket);
    }
}