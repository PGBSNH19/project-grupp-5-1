// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    [Migration("20210108143643_AddNewSeeding")]
    partial class AddNewSeeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Backend.Models.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(5,4)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Coupon");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Flash",
                            Description = "Get 25% off on all stocks we have.",
                            Discount = 0.25m,
                            Enabled = true,
                            EndDate = new DateTime(2021, 1, 15, 15, 36, 42, 706, DateTimeKind.Local).AddTicks(1048),
                            StartDate = new DateTime(2021, 1, 8, 15, 36, 42, 703, DateTimeKind.Local).AddTicks(4219)
                        },
                        new
                        {
                            Id = 2,
                            Code = "Year2021",
                            Description = "You will get 10% discount on every product you buy..",
                            Discount = 0.1m,
                            Enabled = true,
                            EndDate = new DateTime(2021, 1, 21, 15, 36, 42, 706, DateTimeKind.Local).AddTicks(2930),
                            StartDate = new DateTime(2021, 1, 11, 15, 36, 42, 706, DateTimeKind.Local).AddTicks(2909)
                        });
                });

            modelBuilder.Entity("Backend.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Backend.Models.OrderedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderedProduct");
                });

            modelBuilder.Entity("Backend.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Pair these Samsung Galaxy Buds True Wireless Earbuds with your device and go.",
                            IsAvailable = true,
                            IsFeatured = false,
                            Name = "SAMSUNG Galaxy Buds",
                            ProductCategoryId = 2,
                            Stock = 65
                        },
                        new
                        {
                            Id = 2,
                            Description = "Stay on top of your fitness with this Apple Watch Series 3.",
                            IsAvailable = true,
                            IsFeatured = true,
                            Name = "Apple Watch Series 3 GPS",
                            ProductCategoryId = 3,
                            Stock = 34
                        },
                        new
                        {
                            Id = 3,
                            Description = "Meet the 2nd generation Nest Mini, the speaker you control with your voice.",
                            IsAvailable = true,
                            IsFeatured = false,
                            Name = "Google Nest Mini (2nd Generation) - Charcoal",
                            ProductCategoryId = 1,
                            Stock = 11
                        },
                        new
                        {
                            Id = 4,
                            Description = "Keep your favorite songs, photos, videos and games, thanks to 32GB of built-in memory.",
                            IsAvailable = true,
                            IsFeatured = false,
                            Name = "SAMSUNG Galaxy Tab A 8.0\" 32 GB",
                            ProductCategoryId = 4,
                            Stock = 23
                        },
                        new
                        {
                            Id = 5,
                            Description = "At less than four pounds, this thin and light silver Chromebook laptop is easy to take from room to room or on the road.",
                            IsAvailable = true,
                            IsFeatured = true,
                            Name = "HP 14\" Pentium 4GB / 64GB Chromebook",
                            ProductCategoryId = 1,
                            Stock = 43
                        },
                        new
                        {
                            Id = 6,
                            Description = "Enjoy all-day comfort and distraction-free music with the new Studio ANC.",
                            IsAvailable = false,
                            IsFeatured = false,
                            Name = "JLab Audio Studio ANC On-Ear",
                            ProductCategoryId = 2,
                            Stock = 37
                        });
                });

            modelBuilder.Entity("Backend.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Uncategorized"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Headphones"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Smart Watches"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Tablets"
                        });
                });

            modelBuilder.Entity("Backend.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageName = "01A.jpg",
                            IsDefault = true,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageName = "01B.jpg",
                            IsDefault = false,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 3,
                            ImageName = "02A.jpg",
                            IsDefault = true,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 4,
                            ImageName = "02B.jpg",
                            IsDefault = false,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 5,
                            ImageName = "03A.jpg",
                            IsDefault = true,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 6,
                            ImageName = "03B.jpg",
                            IsDefault = false,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 7,
                            ImageName = "04A.jpg",
                            IsDefault = true,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 8,
                            ImageName = "04B.jpg",
                            IsDefault = false,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 9,
                            ImageName = "05A.jpg",
                            IsDefault = true,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 10,
                            ImageName = "05B.jpg",
                            IsDefault = false,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 11,
                            ImageName = "06A.jpg",
                            IsDefault = true,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 12,
                            ImageName = "06B.jpg",
                            IsDefault = false,
                            ProductId = 6
                        });
                });

            modelBuilder.Entity("Backend.Models.ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateChanged")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrice");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateChanged = new DateTime(2021, 1, 8, 15, 36, 42, 706, DateTimeKind.Local).AddTicks(5736),
                            Price = 1300m,
                            ProductId = 1,
                            SalePrice = 900m
                        },
                        new
                        {
                            Id = 2,
                            DateChanged = new DateTime(2021, 1, 8, 15, 36, 42, 706, DateTimeKind.Local).AddTicks(7207),
                            Price = 2290m,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateChanged = new DateTime(2021, 1, 8, 15, 36, 42, 706, DateTimeKind.Local).AddTicks(8171),
                            Price = 329m,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateChanged = new DateTime(2021, 1, 8, 15, 36, 42, 706, DateTimeKind.Local).AddTicks(8206),
                            Price = 2490m,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            DateChanged = new DateTime(2021, 1, 8, 15, 36, 42, 706, DateTimeKind.Local).AddTicks(8210),
                            Price = 3790m,
                            ProductId = 5,
                            SalePrice = 3200m
                        },
                        new
                        {
                            Id = 6,
                            DateChanged = new DateTime(2021, 1, 8, 15, 36, 42, 706, DateTimeKind.Local).AddTicks(8222),
                            Price = 319m,
                            ProductId = 6,
                            SalePrice = 250m
                        });
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Ahmad",
                            LastName = "Yassin",
                            Password = "7c4a8d09ca3762af61e59520943dc26494f8941b",
                            Role = 1,
                            Username = "akyassin"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Andre",
                            LastName = "Morad",
                            Password = "7c4a8d09ca3762af61e59520943dc26494f8941b",
                            Role = 1,
                            Username = "amorad"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Nor",
                            LastName = "Shiervani",
                            Password = "7c4a8d09ca3762af61e59520943dc26494f8941b",
                            Role = 1,
                            Username = "nshiervani"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Irvin",
                            LastName = "Perez",
                            Password = "7c4a8d09ca3762af61e59520943dc26494f8941b",
                            Role = 1,
                            Username = "iperez"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Micael",
                            LastName = "Wolter",
                            Password = "7c4a8d09ca3762af61e59520943dc26494f8941b",
                            Role = 1,
                            Username = "mwolter"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Jim",
                            LastName = "Bob",
                            Password = "7c4a8d09ca3762af61e59520943dc26494f8941b",
                            Role = 2,
                            Username = "customerjim"
                        });
                });

            modelBuilder.Entity("Backend.Models.Weather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Weather");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Freezing"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bracing"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Chilly"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cool"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mild"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Warm"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Balmy"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Hot"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Sweltering"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Scorching"
                        });
                });

            modelBuilder.Entity("Backend.Models.Order", b =>
                {
                    b.HasOne("Backend.Models.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId");

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.OrderedProduct", b =>
                {
                    b.HasOne("Backend.Models.Order", "Order")
                        .WithMany("OrderedProduct")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Product", "Product")
                        .WithMany("OrderedProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Backend.Models.Product", b =>
                {
                    b.HasOne("Backend.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Backend.Models.ProductImage", b =>
                {
                    b.HasOne("Backend.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Backend.Models.ProductPrice", b =>
                {
                    b.HasOne("Backend.Models.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Backend.Models.Coupon", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Backend.Models.Order", b =>
                {
                    b.Navigation("OrderedProduct");
                });

            modelBuilder.Entity("Backend.Models.Product", b =>
                {
                    b.Navigation("OrderedProducts");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductPrices");
                });

            modelBuilder.Entity("Backend.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
